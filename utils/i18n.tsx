"use client"

import { createContext, useContext, useState, type ReactNode } from "react"

type Locale = "en" | "hi" | "te"

interface Translations {
  [key: string]: {
    [key: string]: string
  }
}

// English translations
const en: Translations = {
  login: {
    welcome: "Welcome to Vaya",
    phoneNumber: "Phone Number",
    sendOtp: "Send OTP",
    otpSent: "OTP sent to",
    enterOtp: "Enter OTP",
    verify: "Verify",
    verifying: "Verifying...",
    changeNumber: "Change Number",
  },
  name: {
    title: "What should we call you?",
    label: "Your Name",
    placeholder: "Enter your name",
    proceed: "Proceed to Locations",
  },
  location: {
    title: "Set Locations",
    pickup: "Pickup Location",
    pickupPlaceholder: "Enter pickup location",
    dropoff: "Drop-off Location",
    dropoffPlaceholder: "Enter drop-off location",
    next: "Next",
    back: "Back",
  },
  vehicle: {
    title: "Select Vehicle",
    selectVehicle: "Choose your ride",
    pickupLocation: "Pickup",
    dropoffLocation: "Drop-off",
    confirmRide: "Confirm Ride",
  },
  searching: {
    title: "Finding Driver",
    lookingForDriver: "Looking for a driver",
    pleaseWait: "Please wait while we connect you with a driver",
    rideDetails: "Ride Details",
    from: "From",
    to: "To",
    vehicle: "Vehicle",
  },
  tracking: {
    title: "Driver Details",
    mapPlaceholder: "Map loading...",
    shareOtp: "Share OTP with driver",
    arriving: "Arriving in",
    from: "From",
    to: "To",
  },
  startRide: {
    title: "Ride Started",
    rideStarted: "Your ride has started!",
    from: "From",
    to: "To",
    vehicle: "Vehicle",
  },
  locationInRide: {
    title: "On the way",
    mapPlaceholder: "Map loading...",
    eta: "Arriving in",
    from: "From",
    to: "To",
  },
  endRide: {
    title: "Ride Completed",
    rideCompleted: "Your Ride has been completed!!",
    thankYou: "Thank you for riding with us",
    rideSummary: "Ride Summary",
    from: "From",
    to: "To",
    vehicle: "Vehicle",
    totalFare: "Total Fare",
    payDriver: "Please Pay to Driver",
  },
  thankYou: {
    title: "Thank You",
    message: "Thanks for using Vaya",
    subMessage: "We hope you enjoyed your ride",
    rateExperience: "Rate your experience",
    bookAgain: "Book Another Ride",
  },
  menu: {
    open: "Open menu",
    profile: "Profile",
    history: "Ride History",
    help: "Help & Support",
    settings: "Settings",
  },
  map: {
    placeholder: "Map will be displayed here",
    search: "Search for a location",
  },
  share: {
    label: "Share ride details",
    message: "Ride details shared successfully!",
  },
  popup: {
    driverMessage: "Message from your driver",
    dontCancel: "ЁЯУв Please don't cancel the ride тАФ I'm arriving soon!",
  },
  toast: {
    otpSuccess: "тЬЕ OTP Verified. Welcome aboard!",
    rideConfirmed: "ЁЯЪЧ Ride confirmed! Driver is on the way.",
    rideStarted: "ЁЯЪЧ Your ride has started тАФ sit back and enjoy the journey!",
    rideComplete: "ЁЯОЙ Your ride is complete! Hope you had a smooth trip!",
    thankYou: "ЁЯЩП Thanks for riding with Vaya!",
    lookingForDriver: "ЁЯЫ║ Looking for a driver near you...",
  },
  profile: {
    title: "Profile",
    defaultName: "Rider",
    phoneNumber: "Phone Number",
    ridesCompleted: "Rides Completed",
    rides: "rides",
    memberSince: "Member Since",
    date: "May 2023",
  },
}

// Hindi translations
const hi: Translations = {
  login: {
    welcome: "рд╡рд╛рдпрд╛ рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ",
    phoneNumber: "рдлреЛрди рдирдВрдмрд░",
    sendOtp: "OTP рднреЗрдЬреЗрдВ",
    otpSent: "OTP рднреЗрдЬрд╛ рдЧрдпрд╛",
    enterOtp: "OTP рджрд░реНрдЬ рдХрд░реЗрдВ",
    verify: "рд╕рддреНрдпрд╛рдкрд┐рдд рдХрд░реЗрдВ",
    verifying: "рд╕рддреНрдпрд╛рдкрд┐рдд рд╣реЛ рд░рд╣рд╛ рд╣реИ...",
    changeNumber: "рдирдВрдмрд░ рдмрджрд▓реЗрдВ",
  },
  name: {
    title: "рд╣рдо рдЖрдкрдХреЛ рдХреНрдпрд╛ рдХрд╣реЗрдВ?",
    label: "рдЖрдкрдХрд╛ рдирд╛рдо",
    placeholder: "рдЕрдкрдирд╛ рдирд╛рдо рджрд░реНрдЬ рдХрд░реЗрдВ",
    proceed: "рд╕реНрдерд╛рдиреЛрдВ рдкрд░ рдЖрдЧреЗ рдмрдврд╝реЗрдВ",
  },
  location: {
    title: "рд╕реНрдерд╛рди рд╕реЗрдЯ рдХрд░реЗрдВ",
    pickup: "рдкрд┐рдХрдЕрдк рд╕реНрдерд╛рди",
    pickupPlaceholder: "рдкрд┐рдХрдЕрдк рд╕реНрдерд╛рди рджрд░реНрдЬ рдХрд░реЗрдВ",
    dropoff: "рдбреНрд░реЙрдк-рдСрдл рд╕реНрдерд╛рди",
    dropoffPlaceholder: "рдбреНрд░реЙрдк-рдСрдл рд╕реНрдерд╛рди рджрд░реНрдЬ рдХрд░реЗрдВ",
    next: "рдЕрдЧрд▓рд╛",
    back: "рд╡рд╛рдкрд╕",
  },
  vehicle: {
    title: "рд╡рд╛рд╣рди рдЪреБрдиреЗрдВ",
    selectVehicle: "рдЕрдкрдиреА рд╕рд╡рд╛рд░реА рдЪреБрдиреЗрдВ",
    pickupLocation: "рдкрд┐рдХрдЕрдк",
    dropoffLocation: "рдбреНрд░реЙрдк-рдСрдл",
    confirmRide: "рд╕рд╡рд╛рд░реА рдХреА рдкреБрд╖реНрдЯрд┐ рдХрд░реЗрдВ",
  },
  searching: {
    title: "рдбреНрд░рд╛рдЗрд╡рд░ рдЦреЛрдЬ рд░рд╣реЗ рд╣реИрдВ",
    lookingForDriver: "рдбреНрд░рд╛рдЗрд╡рд░ рдХреА рддрд▓рд╛рд╢ рд╣реЛ рд░рд╣реА рд╣реИ",
    pleaseWait: "рдХреГрдкрдпрд╛ рдкреНрд░рддреАрдХреНрд╖рд╛ рдХрд░реЗрдВ рдЬрдмрдХрд┐ рд╣рдо рдЖрдкрдХреЛ рдПрдХ рдбреНрд░рд╛рдЗрд╡рд░ рд╕реЗ рдЬреЛрдбрд╝рддреЗ рд╣реИрдВ",
    rideDetails: "рд╕рд╡рд╛рд░реА рд╡рд┐рд╡рд░рдг",
    from: "рд╕реЗ",
    to: "рддрдХ",
    vehicle: "рд╡рд╛рд╣рди",
  },
  tracking: {
    title: "рдбреНрд░рд╛рдЗрд╡рд░ рд╡рд┐рд╡рд░рдг",
    mapPlaceholder: "рдорд╛рдирдЪрд┐рддреНрд░ рд▓реЛрдб рд╣реЛ рд░рд╣рд╛ рд╣реИ...",
    shareOtp: "рдбреНрд░рд╛рдЗрд╡рд░ рдХреЗ рд╕рд╛рде OTP рд╕рд╛рдЭрд╛ рдХрд░реЗрдВ",
    arriving: "рдЖрдиреЗ рдореЗрдВ",
    from: "рд╕реЗ",
    to: "рддрдХ",
  },
  startRide: {
    title: "рд╕рд╡рд╛рд░реА рд╢реБрд░реВ рд╣реБрдИ",
    rideStarted: "рдЖрдкрдХреА рд╕рд╡рд╛рд░реА рд╢реБрд░реВ рд╣реЛ рдЧрдИ рд╣реИ!",
    from: "рд╕реЗ",
    to: "рддрдХ",
    vehicle: "рд╡рд╛рд╣рди",
  },
  locationInRide: {
    title: "рд░рд╛рд╕реНрддреЗ рдореЗрдВ",
    mapPlaceholder: "рдорд╛рдирдЪрд┐рддреНрд░ рд▓реЛрдб рд╣реЛ рд░рд╣рд╛ рд╣реИ...",
    eta: "рдЖрдиреЗ рдореЗрдВ",
    from: "рд╕реЗ",
    to: "рддрдХ",
  },
  endRide: {
    title: "рд╕рд╡рд╛рд░реА рдкреВрд░реА рд╣реБрдИ",
    rideCompleted: "рдЖрдкрдХреА рд╕рд╡рд╛рд░реА рдкреВрд░реА рд╣реЛ рдЧрдИ рд╣реИ!!",
    thankYou: "рд╣рдорд╛рд░реЗ рд╕рд╛рде рд╕рд╡рд╛рд░реА рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдзрдиреНрдпрд╡рд╛рдж",
    rideSummary: "рд╕рд╡рд╛рд░реА рд╕рд╛рд░рд╛рдВрд╢",
    from: "рд╕реЗ",
    to: "рддрдХ",
    vehicle: "рд╡рд╛рд╣рди",
    totalFare: "рдХреБрд▓ рдХрд┐рд░рд╛рдпрд╛",
    payDriver: "рдХреГрдкрдпрд╛ рдбреНрд░рд╛рдЗрд╡рд░ рдХреЛ рднреБрдЧрддрд╛рди рдХрд░реЗрдВ",
  },
  thankYou: {
    title: "рдзрдиреНрдпрд╡рд╛рдж",
    message: "рд╡рд╛рдпрд╛ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдзрдиреНрдпрд╡рд╛рдж",
    subMessage: "рд╣рдореЗрдВ рдЖрд╢рд╛ рд╣реИ рдХрд┐ рдЖрдкрдиреЗ рдЕрдкрдиреА рд╕рд╡рд╛рд░реА рдХрд╛ рдЖрдирдВрдж рд▓рд┐рдпрд╛",
    rateExperience: "рдЕрдкрдиреЗ рдЕрдиреБрднрд╡ рдХрд╛ рдореВрд▓реНрдпрд╛рдВрдХрди рдХрд░реЗрдВ",
    bookAgain: "рдПрдХ рдФрд░ рд╕рд╡рд╛рд░реА рдмреБрдХ рдХрд░реЗрдВ",
  },
  menu: {
    open: "рдореЗрдиреВ рдЦреЛрд▓реЗрдВ",
    profile: "рдкреНрд░реЛрдлрд╛рдЗрд▓",
    history: "рд╕рд╡рд╛рд░реА рдЗрддрд┐рд╣рд╛рд╕",
    help: "рд╕рд╣рд╛рдпрддрд╛ рдФрд░ рд╕рдорд░реНрдерди",
    settings: "рд╕реЗрдЯрд┐рдВрдЧреНрд╕",
  },
  map: {
    placeholder: "рдорд╛рдирдЪрд┐рддреНрд░ рдпрд╣рд╛рдВ рдкреНрд░рджрд░реНрд╢рд┐рдд рдХрд┐рдпрд╛ рдЬрд╛рдПрдЧрд╛",
    search: "рд╕реНрдерд╛рди рдЦреЛрдЬреЗрдВ",
  },
  share: {
    label: "рд╕рд╡рд╛рд░реА рд╡рд┐рд╡рд░рдг рд╕рд╛рдЭрд╛ рдХрд░реЗрдВ",
    message: "рд╕рд╡рд╛рд░реА рд╡рд┐рд╡рд░рдг рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рд╕рд╛рдЭрд╛ рдХрд┐рдпрд╛ рдЧрдпрд╛!",
  },
  popup: {
    driverMessage: "рдЖрдкрдХреЗ рдбреНрд░рд╛рдЗрд╡рд░ рдХрд╛ рд╕рдВрджреЗрд╢",
    dontCancel: "ЁЯУв рдХреГрдкрдпрд╛ рд░рд╛рдЗрдб рдХреИрдВрд╕рд┐рд▓ рди рдХрд░реЗрдВ тАФ рдореИрдВ рдЬрд▓реНрдж рд╣реА рдкрд╣реБрдБрдЪ рд░рд╣рд╛ рд╣реВрдБ!",
  },
  toast: {
    otpSuccess: "тЬЕ рдУрдЯреАрдкреА рд╕рддреНрдпрд╛рдкрд┐рдд рд╣реБрдЖред рд╕реНрд╡рд╛рдЧрдд рд╣реИ!",
    rideConfirmed: "ЁЯЪЧ рд╕рд╡рд╛рд░реА рдХреА рдкреБрд╖реНрдЯрд┐ рд╣реЛ рдЧрдИ! рдбреНрд░рд╛рдЗрд╡рд░ рд░рд╛рд╕реНрддреЗ рдореЗрдВ рд╣реИред",
    rideStarted: "ЁЯЪЧ рдЖрдкрдХреА рд╕рд╡рд╛рд░реА рд╢реБрд░реВ рд╣реЛ рдЧрдИ рд╣реИ тАФ рдЖрд░рд╛рдо рдХрд░реЗрдВ рдФрд░ рдпрд╛рддреНрд░рд╛ рдХрд╛ рдЖрдирдВрдж рд▓реЗрдВ!",
    rideComplete: "ЁЯОЙ рдЖрдкрдХреА рд╕рд╡рд╛рд░реА рдкреВрд░реА рд╣реБрдИ! рдЙрдореНрдореАрдж рд╣реИ рдЖрдкрдХреА рдпрд╛рддреНрд░рд╛ рд╕реБрдЧрдо рд░рд╣реА!",
    thankYou: "ЁЯЩП рд╡рд╛рдпрд╛ рдХреЗ рд╕рд╛рде рдпрд╛рддреНрд░рд╛ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдзрдиреНрдпрд╡рд╛рдж!",
    lookingForDriver: "ЁЯЫ║ рдЖрдкрдХреЗ рдЖрд╕-рдкрд╛рд╕ рдбреНрд░рд╛рдЗрд╡рд░ рдХреА рддрд▓рд╛рд╢ рд╣реЛ рд░рд╣реА рд╣реИ...",
  },
  profile: {
    title: "рдкреНрд░реЛрдлрд╛рдЗрд▓",
    defaultName: "рд╕рд╡рд╛рд░реА",
    phoneNumber: "рдлреЛрди рдирдВрдмрд░",
    ridesCompleted: "рдкреВрд░реА рдХреА рдЧрдИ рд╕рд╡рд╛рд░рд┐рдпрд╛рдВ",
    rides: "рд╕рд╡рд╛рд░рд┐рдпрд╛рдВ",
    memberSince: "рд╕рджрд╕реНрдпрддрд╛ рд╢реБрд░реВ",
    date: "рдордИ 2023",
  },
}

// Telugu translations
const te: Translations = {
  login: {
    welcome: "р░╡р░╛р░пр░╛р░Хр░┐ р░╕р▒Нр░╡р░╛р░Чр░др░В",
    phoneNumber: "р░лр▒Лр░ир▒Н р░ир░Вр░мр░░р▒Н",
    sendOtp: "OTP р░кр░Вр░кр░Вр░бр░┐",
    otpSent: "OTP р░кр░Вр░кр░мр░бр░┐р░Вр░жр░┐",
    enterOtp: "OTP р░ир░┐ р░ир░ор▒Лр░жр▒Б р░Ър▒Зр░пр░Вр░бр░┐",
    verify: "р░зр▒Гр░╡р▒Ар░Хр░░р░┐р░Вр░Ър░Вр░бр░┐",
    verifying: "р░зр▒Гр░╡р▒Ар░Хр░░р░┐р░╕р▒Нр░др▒Лр░Вр░жр░┐...",
    changeNumber: "р░ир░Вр░мр░░р▒Н р░ор░╛р░░р▒Нр░Ър░Вр░бр░┐",
  },
  name: {
    title: "р░ор▒Зр░ор▒Б р░ор░┐р░ор▒Нр░ор░▓р▒Нр░ир░┐ р░Пр░ор░ир░┐ р░кр░┐р░▓р░╡р░╛р░▓р░┐?",
    label: "р░ор▒А р░кр▒Зр░░р▒Б",
    placeholder: "р░ор▒А р░кр▒Зр░░р▒Б р░ир░ор▒Лр░жр▒Б р░Ър▒Зр░пр░Вр░бр░┐",
    proceed: "р░╕р▒Нр░ер░╛р░ир░╛р░▓р░Хр▒Б р░Хр▒Кр░ир░╕р░╛р░Чр░Вр░бр░┐",
  },
  location: {
    title: "р░╕р▒Нр░ер░╛р░ир░╛р░▓р░ир▒Б р░╕р▒Жр░Яр▒Н р░Ър▒Зр░пр░Вр░бр░┐",
    pickup: "р░кр░┐р░Хр░кр▒Н р░╕р▒Нр░ер░╛р░ир░В",
    pickupPlaceholder: "р░кр░┐р░Хр░кр▒Н р░╕р▒Нр░ер░╛р░ир░╛р░ир▒Нр░ир░┐ р░ир░ор▒Лр░жр▒Б р░Ър▒Зр░пр░Вр░бр░┐",
    dropoff: "р░бр▒Нр░░р░╛р░кр▒Н-р░Жр░лр▒Н р░╕р▒Нр░ер░╛р░ир░В",
    dropoffPlaceholder: "р░бр▒Нр░░р░╛р░кр▒Н-р░Жр░лр▒Н р░╕р▒Нр░ер░╛р░ир░╛р░ир▒Нр░ир░┐ р░ир░ор▒Лр░жр▒Б р░Ър▒Зр░пр░Вр░бр░┐",
    next: "р░др░жр▒Бр░кр░░р░┐",
    back: "р░╡р▒Жр░ир▒Бр░Хр░Хр▒Б",
  },
  vehicle: {
    title: "р░╡р░╛р░╣р░ир░╛р░ир▒Нр░ир░┐ р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐",
    selectVehicle: "р░ор▒А р░░р▒Ир░бр▒НтАМр░ир░┐ р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐",
    pickupLocation: "р░кр░┐р░Хр░кр▒Н",
    dropoffLocation: "р░бр▒Нр░░р░╛р░кр▒Н-р░Жр░лр▒Н",
    confirmRide: "р░░р▒Ир░бр▒НтАМр░ир░┐ р░ир░┐р░░р▒Нр░зр░╛р░░р░┐р░Вр░Ър░Вр░бр░┐",
  },
  searching: {
    title: "р░бр▒Нр░░р▒Ир░╡р░░р▒НтАМр░ир░┐ р░Хр░ир▒Бр░Чр▒Кр░Вр░Яр▒Лр░Вр░жр░┐",
    lookingForDriver: "р░бр▒Нр░░р▒Ир░╡р░░р▒Н р░Хр▒Лр░╕р░В р░╡р▒Жр░др▒Бр░Хр▒Бр░др▒Лр░Вр░жр░┐",
    pleaseWait: "р░ор▒Зр░ор▒Б р░ор░┐р░ор▒Нр░ор░▓р▒Нр░ир░┐ р░бр▒Нр░░р▒Ир░╡р░░р▒НтАМр░др▒Л р░Хр░ир▒Жр░Хр▒Нр░Яр▒Н р░Ър▒Зр░╕р▒Нр░др▒Бр░ир▒Нр░ир░кр▒Нр░кр▒Бр░бр▒Б р░жр░пр░Ър▒Зр░╕р░┐ р░╡р▒Зр░Ър░┐ р░Йр░Вр░бр░Вр░бр░┐",
    rideDetails: "р░░р▒Ир░бр▒Н р░╡р░┐р░╡р░░р░╛р░▓р▒Б",
    from: "р░ир▒Бр░Вр░бр░┐",
    to: "р░╡р░░р░Хр▒Б",
    vehicle: "р░╡р░╛р░╣р░ир░В",
  },
  tracking: {
    title: "р░бр▒Нр░░р▒Ир░╡р░░р▒Н р░╡р░┐р░╡р░░р░╛р░▓р▒Б",
    mapPlaceholder: "р░ор▒Нр░пр░╛р░кр▒Н р░▓р▒Лр░бр▒Н р░Ер░╡р▒Бр░др▒Лр░Вр░жр░┐...",
    shareOtp: "р░бр▒Нр░░р▒Ир░╡р░░р▒НтАМр░др▒Л OTP р░╖р▒Зр░░р▒Н р░Ър▒Зр░пр░Вр░бр░┐",
    arriving: "р░Ър▒Зр░░р▒Бр░Хр▒Бр░Вр░Яр▒Лр░Вр░жр░┐",
    from: "р░ир▒Бр░Вр░бр░┐",
    to: "р░╡р░░р░Хр▒Б",
  },
  startRide: {
    title: "р░░р▒Ир░бр▒Н р░кр▒Нр░░р░╛р░░р░Вр░нр░ор▒Ир░Вр░жр░┐",
    rideStarted: "р░ор▒А р░░р▒Ир░бр▒Н р░кр▒Нр░░р░╛р░░р░Вр░нр░ор▒Ир░Вр░жр░┐!",
    from: "р░ир▒Бр░Вр░бр░┐",
    to: "р░╡р░░р░Хр▒Б",
    vehicle: "р░╡р░╛р░╣р░ир░В",
  },
  locationInRide: {
    title: "р░кр▒Нр░░р░пр░╛р░гр░Вр░▓р▒Л",
    mapPlaceholder: "р░ор▒Нр░пр░╛р░кр▒Н р░▓р▒Лр░бр▒Н р░Ер░╡р▒Бр░др▒Лр░Вр░жр░┐...",
    eta: "р░Ър▒Зр░░р▒Бр░Хр▒Бр░Вр░Яр▒Лр░Вр░жр░┐",
    from: "р░ир▒Бр░Вр░бр░┐",
    to: "р░╡р░░р░Хр▒Б",
  },
  endRide: {
    title: "р░░р▒Ир░бр▒Н р░кр▒Вр░░р▒Нр░др░пр░┐р░Вр░жр░┐",
    rideCompleted: "р░ор▒А р░░р▒Ир░бр▒Н р░кр▒Вр░░р▒Нр░др░пр░┐р░Вр░жр░┐!!",
    thankYou: "р░ор░╛р░др▒Л р░░р▒Ир░бр▒Н р░Ър▒Зр░╕р░┐р░ир░Вр░жр▒Бр░Хр▒Б р░зр░ир▒Нр░пр░╡р░╛р░жр░╛р░▓р▒Б",
    rideSummary: "р░░р▒Ир░бр▒Н р░╕р░╛р░░р░╛р░Вр░╢р░В",
    from: "р░ир▒Бр░Вр░бр░┐",
    to: "р░╡р░░р░Хр▒Б",
    vehicle: "р░╡р░╛р░╣р░ир░В",
    totalFare: "р░ор▒Кр░др▒Нр░др░В р░Ыр░╛р░░р▒Нр░Ьр▒А",
    payDriver: "р░жр░пр░Ър▒Зр░╕р░┐ р░бр▒Нр░░р▒Ир░╡р░░р▒НтАМр░Хр░┐ р░Ър▒Жр░▓р▒Нр░▓р░┐р░Вр░Ър░Вр░бр░┐",
  },
  thankYou: {
    title: "р░зр░ир▒Нр░пр░╡р░╛р░жр░╛р░▓р▒Б",
    message: "р░╡р░╛р░пр░╛р░ир░┐ р░Йр░кр░пр▒Лр░Чр░┐р░Вр░Ър░┐р░ир░Вр░жр▒Бр░Хр▒Б р░зр░ир▒Нр░пр░╡р░╛р░жр░╛р░▓р▒Б",
    subMessage: "р░ор▒Ар░░р▒Б р░ор▒А р░░р▒Ир░бр▒НтАМр░ир░┐ р░Жр░╕р▒Нр░╡р░╛р░жр░┐р░Вр░Ър░╛р░░р░ир░┐ р░ор▒Зр░ор▒Б р░Жр░╢р░┐р░╕р▒Нр░др▒Бр░ир▒Нр░ир░╛р░ор▒Б",
    rateExperience: "р░ор▒А р░Ер░ир▒Бр░нр░╡р░╛р░ир▒Нр░ир░┐ р░░р▒Зр░Яр▒Н р░Ър▒Зр░пр░Вр░бр░┐",
    bookAgain: "р░ор░░р▒Кр░Х р░░р▒Ир░бр▒Н р░мр▒Бр░Хр▒Н р░Ър▒Зр░пр░Вр░бр░┐",
  },
  menu: {
    open: "р░ор▒Жр░ир▒В р░др▒Жр░░р░╡р░Вр░бр░┐",
    profile: "р░кр▒Нр░░р▒Кр░лр▒Ир░▓р▒Н",
    history: "р░░р▒Ир░бр▒Н р░Ър░░р░┐р░др▒Нр░░",
    help: "р░╕р░╣р░╛р░пр░В & р░ор░жр▒Нр░жр░др▒Б",
    settings: "р░╕р▒Жр░Яр▒Нр░Яр░┐р░Вр░Чр▒НтАМр░▓р▒Б",
  },
  map: {
    placeholder: "р░ор▒Нр░пр░╛р░кр▒Н р░Зр░Хр▒Нр░Хр░б р░кр▒Нр░░р░жр░░р▒Нр░╢р░┐р░Вр░Ър░мр░бр▒Бр░др▒Бр░Вр░жр░┐",
    search: "р░╕р▒Нр░ер░╛р░ир░╛р░ир▒Нр░ир░┐ р░╢р▒Лр░зр░┐р░Вр░Ър░Вр░бр░┐",
  },
  share: {
    label: "р░░р▒Ир░бр▒Н р░╡р░┐р░╡р░░р░╛р░▓р░ир▒Б р░╖р▒Зр░░р▒Н р░Ър▒Зр░пр░Вр░бр░┐",
    message: "р░░р▒Ир░бр▒Н р░╡р░┐р░╡р░░р░╛р░▓р▒Б р░╡р░┐р░Ьр░пр░╡р░Вр░др░Вр░Чр░╛ р░╖р▒Зр░░р▒Н р░Ър▒Зр░пр░мр░бр▒Нр░бр░╛р░пр░┐!",
  },
  popup: {
    driverMessage: "р░ор▒А р░бр▒Нр░░р▒Ир░╡р░░р▒Н р░ир▒Бр░Вр░бр░┐ р░╕р░Вр░жр▒Зр░╢р░В",
    dontCancel: "ЁЯУв р░жр░пр░Ър▒Зр░╕р░┐ р░░р▒Ир░бр▒Н р░Хр▒Нр░пр░╛р░ир▒Нр░╕р░┐р░▓р▒Н р░Ър▒Зр░пр░Хр░Вр░бр░┐ тАФ р░ир▒Зр░ир▒Б р░др▒Нр░╡р░░р░▓р▒Л р░╡р░╕р▒Нр░др▒Бр░ир▒Нр░ир░╛р░ир▒Б!",
  },
  toast: {
    otpSuccess: "тЬЕ OTP р░зр▒Гр░╡р▒Ар░Хр░░р░┐р░Вр░Ър░мр░бр░┐р░Вр░жр░┐. р░╕р▒Нр░╡р░╛р░Чр░др░В!",
    rideConfirmed: "ЁЯЪЧ р░░р▒Ир░бр▒Н р░ир░┐р░░р▒Нр░зр░╛р░░р░┐р░Вр░Ър░мр░бр░┐р░Вр░жр░┐! р░бр▒Нр░░р▒Ир░╡р░░р▒Н р░жр░╛р░░р░┐р░▓р▒Л р░Йр░ир▒Нр░ир░╛р░░р▒Б.",
    rideStarted: "ЁЯЪЧ р░ор▒А р░░р▒Ир░бр▒Н р░кр▒Нр░░р░╛р░░р░Вр░нр░ор▒Ир░Вр░жр░┐ тАФ р░╡р░┐р░╢р▒Нр░░р░╛р░Вр░др░┐р░Чр░╛ р░Йр░Вр░бр░Вр░бр░┐, р░кр▒Нр░░р░пр░╛р░гр░╛р░ир▒Нр░ир░┐ р░Жр░ир░Вр░жр░┐р░Вр░Ър░Вр░бр░┐!",
    rideComplete: "ЁЯОЙ р░ор▒А р░░р▒Ир░бр▒Н р░кр▒Вр░░р▒Нр░др░пр░┐р░Вр░жр░┐! р░ор▒А р░кр▒Нр░░р░пр░╛р░гр░В р░╕р▒Мр░Хр░░р▒Нр░пр░╡р░Вр░др░Вр░Чр░╛ р░╕р░╛р░Чр░┐р░Вр░жр░ир░┐ р░Жр░╢р░┐р░╕р▒Нр░др▒Бр░ир▒Нр░ир░╛р░ир▒Б!",
    thankYou: "ЁЯЩП р░╡р░╛р░пр░╛ р░др▒Л р░кр▒Нр░░р░пр░╛р░гр░┐р░Вр░Ър░┐р░ир░Вр░жр▒Бр░Хр▒Б р░зр░ир▒Нр░пр░╡р░╛р░жр░╛р░▓р▒Б!",
    lookingForDriver: "ЁЯЫ║ р░ор▒А р░╕р░ор▒Ар░кр░Вр░▓р▒Л р░бр▒Нр░░р▒Ир░╡р░░р▒Н р░Хр▒Лр░╕р░В р░╡р▒Жр░др▒Бр░Хр▒Бр░др▒Бр░ир▒Нр░ир░╛р░В...",
  },
  profile: {
    title: "р░кр▒Нр░░р▒Кр░лр▒Ир░▓р▒Н",
    defaultName: "р░кр▒Нр░░р░пр░╛р░гр░┐р░Хр▒Бр░бр▒Б",
    phoneNumber: "р░лр▒Лр░ир▒Н р░ир░Вр░мр░░р▒Н",
    ridesCompleted: "р░кр▒Вр░░р▒Нр░др░пр░┐р░и р░░р▒Ир░бр▒Нр░▓р▒Б",
    rides: "р░░р▒Ир░бр▒Нр░▓р▒Б",
    memberSince: "р░╕р░нр▒Нр░пр░др▒Нр░╡р░В р░кр▒Кр░Вр░жр░┐р░и р░др▒Зр░жр▒А",
    date: "р░ор▒З 2023",
  },
}

interface I18nContextType {
  locale: Locale
  setLocale: (locale: Locale) => void
  t: (key: string) => string
}

const I18nContext = createContext<I18nContextType | undefined>(undefined)

interface I18nProviderProps {
  children: ReactNode
}

export function I18nProvider({ children }: I18nProviderProps) {
  const [locale, setLocale] = useState<Locale>("en")

  const t = (key: string): string => {
    const keys = key.split(".")
    const category = keys[0]
    const messageKey = keys[1]

    let translations
    switch (locale) {
      case "hi":
        translations = hi
        break
      case "te":
        translations = te
        break
      default:
        translations = en
    }

    return translations[category]?.[messageKey] || key
  }

  return <I18nContext.Provider value={{ locale, setLocale, t }}>{children}</I18nContext.Provider>
}

export function useTranslation() {
  const context = useContext(I18nContext)
  if (context === undefined) {
    throw new Error("useTranslation must be used within an I18nProvider")
  }
  return context
}
